---
# Source: kafka/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-zookeeper
  namespace: hornet
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.2.0
    app.kubernetes.io/instance: kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
    role: zookeeper
  annotations:
    pia-team.com/role: pia.k8s.kafka/0.4.1
spec:
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: kafka
      app.kubernetes.io/component: zookeeper
  serviceName: kafka-zookeeper-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: zookeeper
        helm.sh/chart: zookeeper-10.2.0
        app.kubernetes.io/instance: kafka
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zookeeper
    spec:
      serviceAccountName: default

      imagePullSecrets:
      - name: reg-creds
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: zookeeper
                  app.kubernetes.io/instance: kafka
                  app.kubernetes.io/component: zookeeper
              namespaces:
              - "hornet"
              topologyKey: kubernetes.io/hostname
            weight: 1
        nodeAffinity:
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
      - name: zookeeper
        image: 
          europe-docker.pkg.dev/dnext-io/ghcr-dnext-technology/dnext-technology/3rd-party/bitnami/zookeeper:3.8.0-debian-11-r30
        imagePullPolicy: "IfNotPresent"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
        command:
        - /scripts/setup.sh
        resources:
          limits:
            cpu: 1000m
            memory: 1000Mi
          requests:
            cpu: 10m
            memory: 500Mi
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: ZOO_DATA_LOG_DIR
          value: ""
        - name: ZOO_PORT_NUMBER
          value: "2181"
        - name: ZOO_TICK_TIME
          value: "2000"
        - name: ZOO_INIT_LIMIT
          value: "10"
        - name: ZOO_SYNC_LIMIT
          value: "5"
        - name: ZOO_PRE_ALLOC_SIZE
          value: "65536"
        - name: ZOO_SNAPCOUNT
          value: "100000"
        - name: ZOO_MAX_CLIENT_CNXNS
          value: "60"
        - name: ZOO_4LW_COMMANDS_WHITELIST
          value: "srvr, mntr, ruok"
        - name: ZOO_LISTEN_ALLIPS_ENABLED
          value: "no"
        - name: ZOO_AUTOPURGE_INTERVAL
          value: "0"
        - name: ZOO_AUTOPURGE_RETAIN_COUNT
          value: "3"
        - name: ZOO_MAX_SESSION_TIMEOUT
          value: "40000"
        - name: ZOO_SERVERS
          value: kafka-zookeeper-0.kafka-zookeeper-headless.hornet.svc.cluster.local:2888:3888::1
        - name: ZOO_ENABLE_AUTH
          value: "no"
        - name: ZOO_ENABLE_QUORUM_AUTH
          value: "no"
        - name: ZOO_HEAP_SIZE
          value: "1024"
        - name: ZOO_LOG_LEVEL
          value: "ERROR"
        - name: ALLOW_ANONYMOUS_LOGIN
          value: "yes"
        - name: JVMFLAGS
          value: "-Xmx300m -Xms300m"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        ports:
        - name: client
          containerPort: 2181
        - name: follower
          containerPort: 2888
        - name: election
          containerPort: 3888
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          exec:
            command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost
                2181 | grep imok']
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          exec:
            command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost
                2181 | grep imok']
        volumeMounts:
        - name: scripts
          mountPath: /scripts/setup.sh
          subPath: setup.sh
        - name: data
          mountPath: /bitnami/zookeeper
      volumes:
      - name: scripts
        configMap:
          name: kafka-zookeeper-scripts
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: data
      annotations:
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "10Gi"
      storageClassName: local-path
---
# Source: kafka/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: "hornet"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-18.4.2
    app.kubernetes.io/instance: kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
  annotations:
    pia-team.com/app: kafka
    pia-team.com/app-logo: kafka
    pia-team.com/app-title: Kafka
    pia-team.com/role: pia.k8s.kafka/0.4.1
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: kafka
      app.kubernetes.io/component: kafka
  serviceName: kafka-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka
        helm.sh/chart: kafka-18.4.2
        app.kubernetes.io/instance: kafka
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: kafka
      annotations:
        pia-team.com/app: kafka
        pia-team.com/app-logo: kafka
        pia-team.com/app-title: Kafka
    spec:
      imagePullSecrets:
      - name: reg-creds
      hostNetwork: false
      hostIPC: false
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: kafka
                  app.kubernetes.io/instance: kafka
                  app.kubernetes.io/component: kafka
              namespaces:
              - "hornet"
              topologyKey: kubernetes.io/hostname
            weight: 1
        nodeAffinity:
      securityContext:
        fsGroup: 1001
      serviceAccountName: kafka
      containers:
      - name: kafka
        image: 
          europe-docker.pkg.dev/dnext-io/ghcr-dnext-technology/dnext-technology/3rd-party/bitnami/kafka:3.2.1-debian-11-r16
        imagePullPolicy: "IfNotPresent"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
        command:
        - /scripts/setup.sh
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: "kafka-zookeeper"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "INTERNAL"
        - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
          value: "INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT"
        - name: KAFKA_CFG_LISTENERS
          value: "INTERNAL://:9093,CLIENT://:9092"
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: "INTERNAL://$(MY_POD_NAME).kafka-headless.hornet.svc.cluster.local:9093,CLIENT://$(MY_POD_NAME).kafka-headless.hornet.svc.cluster.local:9092"
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: KAFKA_ZOOKEEPER_PROTOCOL
          value: PLAINTEXT
        - name: KAFKA_VOLUME_DIR
          value: "/bitnami/kafka"
        - name: KAFKA_LOG_DIR
          value: "/opt/bitnami/kafka/logs"
        - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
          value: "true"
        - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_HEAP_OPTS
          value: "-Xmx1200m -Xms1200m"
        - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
          value: "10000"
        - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
          value: "1000"
        - name: KAFKA_CFG_LOG_RETENTION_BYTES
          value: "1073741824"
        - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS
          value: "300000"
        - name: KAFKA_CFG_LOG_RETENTION_HOURS
          value: "168"
        - name: KAFKA_CFG_MESSAGE_MAX_BYTES
          value: "1000012"
        - name: KAFKA_CFG_LOG_SEGMENT_BYTES
          value: "1073741824"
        - name: KAFKA_CFG_LOG_DIRS
          value: "/bitnami/kafka/data"
        - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
          value: "1"
        - name: KAFKA_CFG_NUM_IO_THREADS
          value: "8"
        - name: KAFKA_CFG_NUM_NETWORK_THREADS
          value: "3"
        - name: KAFKA_CFG_NUM_PARTITIONS
          value: "1"
        - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
          value: "1"
        - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
          value: "102400"
        - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
          value: "104857600"
        - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
          value: "102400"
        - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
          value: "6000"
        - name: KAFKA_CFG_AUTHORIZER_CLASS_NAME
          value: ""
        - name: KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND
          value: "true"
        - name: KAFKA_CFG_SUPER_USERS
          value: "User:admin"
        ports:
        - name: kafka-client
          containerPort: 9092
        - name: kafka-internal
          containerPort: 9093
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: kafka-client
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: kafka-client
        resources:
          limits:
            cpu: 2000m
            memory: 2000Mi
          requests:
            cpu: 100m
            memory: 2000Mi
        volumeMounts:
        - name: data
          mountPath: /bitnami/kafka
        - name: logs
          mountPath: /opt/bitnami/kafka/logs
        - name: scripts
          mountPath: /scripts/setup.sh
          subPath: setup.sh
      volumes:
      - name: scripts
        configMap:
          name: kafka-scripts
          defaultMode: 0755
      - name: logs
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "30Gi"
      storageClassName: local-path
