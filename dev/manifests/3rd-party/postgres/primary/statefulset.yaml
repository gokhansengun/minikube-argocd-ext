---
# Source: postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-postgresql
  namespace: "hornet"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.5.8
    app.kubernetes.io/instance: postgres
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
    pia-team.com/app: postgres
    pia-team.com/app-logo: postgres
    pia-team.com/app-title: Postgres
    pia-team.com/role: pia.k8s.postgres/0.5.1
spec:
  replicas: 1
  serviceName: postgres-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: postgres
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: postgres-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.5.8
        app.kubernetes.io/instance: postgres
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
        checksum/extended-configuration: e857976caee3b17c3ba66f97740bbe638eb55f5ecba71088d70dd2aafad0e830
        pia-team.com/app: postgres
        pia-team.com/app-logo: postgres
        pia-team.com/app-title: Postgres
    spec:
      serviceAccountName: default

      imagePullSecrets:
      - name: reg-creds
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: postgresql
                  app.kubernetes.io/instance: postgres
                  app.kubernetes.io/component: primary
              topologyKey: kubernetes.io/hostname
            weight: 1
        nodeAffinity:
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
      - name: postgresql
        image: 
          europe-docker.pkg.dev/dnext-io/ghcr-dnext-technology/dnext-technology/3rd-party/bitnami/postgresql:15.3.0-debian-11-r7
        imagePullPolicy: "IfNotPresent"
        securityContext:
          runAsUser: 1001
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: POSTGRESQL_VOLUME_DIR
          value: "/bitnami/postgresql"
        - name: PGDATA
          value: "/bitnami/postgresql/data"
            # Authentication
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-postgresql
              key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
        - name: POSTGRESQL_ENABLE_LDAP
          value: "no"
            # TLS
        - name: POSTGRESQL_ENABLE_TLS
          value: "no"
            # Audit
        - name: POSTGRESQL_LOG_HOSTNAME
          value: "false"
        - name: POSTGRESQL_LOG_CONNECTIONS
          value: "false"
        - name: POSTGRESQL_LOG_DISCONNECTIONS
          value: "false"
        - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
          value: "off"
            # Others
        - name: POSTGRESQL_CLIENT_MIN_MESSAGES
          value: "error"
        - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
          value: "pgaudit"
        ports:
        - name: tcp-postgresql
          containerPort: 5432
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          exec:
            command:
            - /bin/sh
            - -c
            - -e

            - |
              exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
        resources:
          limits:
            cpu: 2000m
            memory: 500Mi
          requests:
            cpu: 400m
            memory: 500Mi
        volumeMounts:
        - name: postgresql-extended-config
          mountPath: /bitnami/postgresql/conf/conf.d/
        - name: dshm
          mountPath: /dev/shm
        - name: data
          mountPath: /bitnami/postgresql
      volumes:
      - name: postgresql-extended-config
        configMap:
          name: postgres-postgresql-extended-configuration
      - name: dshm
        emptyDir:
          medium: Memory
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: data
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "8Gi"
      storageClassName: local-path
