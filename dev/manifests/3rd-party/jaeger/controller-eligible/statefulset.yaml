---
# Source: jaeger/charts/kafka/templates/controller-eligible/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jaeger-kafka-controller
  namespace: "hornet"
  labels:
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.6.2
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
  annotations:
    pia-team.com/role: pia.k8s.jaeger/0.5.0
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: jaeger
      app.kubernetes.io/name: kafka
      app.kubernetes.io/component: controller-eligible
      app.kubernetes.io/part-of: kafka
  serviceName: jaeger-kafka-controller-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: jaeger
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kafka
        app.kubernetes.io/version: 3.6.1
        helm.sh/chart: kafka-26.6.2
        app.kubernetes.io/component: controller-eligible
        app.kubernetes.io/part-of: kafka
      annotations:
        checksum/configuration: 76bab01b91e6e20a797fde5550c55086111f6bd1e7f65ec0330376152ccb9009
    spec:
      imagePullSecrets:
      - name: reg-creds
      hostNetwork: false
      hostIPC: false
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: jaeger
                  app.kubernetes.io/name: kafka
                  app.kubernetes.io/component: controller-eligible
              topologyKey: kubernetes.io/hostname
            weight: 1
        nodeAffinity:
      securityContext:
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jaeger-kafka
      enableServiceLinks: true
      initContainers:
      - name: kafka-init
        image: 
          europe-docker.pkg.dev/dnext-io/ghcr-dnext-technology/dnext-technology/3rd-party/bitnami/kafka:3.6.1-debian-11-r0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
        resources:
          limits: {}
          requests: {}
        command:
        - /bin/bash
        args:
        - -ec
        - |
          /scripts/kafka-init.sh
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_VOLUME_DIR
          value: "/bitnami/kafka"
        - name: KAFKA_MIN_ID
          value: "0"
        volumeMounts:
        - name: data
          mountPath: /bitnami/kafka
        - name: kafka-config
          mountPath: /config
        - name: kafka-configmaps
          mountPath: /configmaps
        - name: kafka-secret-config
          mountPath: /secret-config
        - name: scripts
          mountPath: /scripts
        - name: tmp
          mountPath: /tmp
      containers:
      - name: kafka
        image: 
          europe-docker.pkg.dev/dnext-io/ghcr-dnext-technology/dnext-technology/3rd-party/bitnami/kafka:3.6.1-debian-11-r0
        imagePullPolicy: "IfNotPresent"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: KAFKA_HEAP_OPTS
          value: "-Xmx1024m -Xms1024m"
        - name: KAFKA_KRAFT_CLUSTER_ID
          valueFrom:
            secretKeyRef:
              name: jaeger-kafka-kraft-cluster-id
              key: kraft-cluster-id
        ports:
        - name: controller
          containerPort: 9093
        - name: client
          containerPort: 9092
        - name: interbroker
          containerPort: 9094
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: "controller"
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: "controller"
        resources:
          limits: {}
          requests: {}
        volumeMounts:
        - name: data
          mountPath: /bitnami/kafka
        - name: logs
          mountPath: /opt/bitnami/kafka/logs
        - name: kafka-config
          mountPath: /opt/bitnami/kafka/config/server.properties
          subPath: server.properties
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: kafka-configmaps
        configMap:
          name: jaeger-kafka-controller-configuration
      - name: kafka-secret-config
        emptyDir: {}
      - name: kafka-config
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: scripts
        configMap:
          name: jaeger-kafka-scripts
          defaultMode: 493
      - name: logs
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "50Gi"
      storageClassName: local-path
